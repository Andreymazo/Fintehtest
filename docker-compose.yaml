version: '3'
services:
  web:
    container_name: web
    build:     
      context: .
      dockerfile: Dockerfile
    env_file:
      .env.dev  
    tty: true
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c " ls -a && python manage.py  makemigrations && python manage.py migrate  &&  python manage.py loaddata db.json && python manage.py runserver 0.0.0.0:8000"
  db:
    container_name: db
    image: 'postgres:14-alpine'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=fintehtest
    # image: postgres:14-alpine
    # build:
    #   context: .
    #   dockerfile: Dockerfile-db
    # restart: always
    # environment:
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD: "123456"
    #   POSTGRES_DB: fintehtest
      # - "POSTGRES_HOST_AUTH_METHOD=trust"
    # env_file:
    #   - .env.dev
    ports:
      - '5432'
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - database_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d fintehtest'"]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  database_volume:

# version: "3"

# services:
#   db:
#     # container_name: db
#     build:
#       context: .
#       dockerfile: Dockerfile-db
#     restart: always
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: "123456"
#       POSTGRES_DB: fintehtest
#       # - "POSTGRES_HOST_AUTH_METHOD=trust"
#     env_file:
#       - .env.dev
#   # db:
#     # image: postgres
# #     container_name: db
  

#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#       - ./scripts/install-extensions.sql:/docker-entrypoint-initdb.d/install-extensions.sql

   
#   web:
#     build: .
#     env_file:
#       - .env.dev
#     # command: python manage.py makemigrations 
#     command: >
#       sh -c "psql -U postgres && create database fintehtest;\c fintehtest && python manage.py migrate &&  python manage.py loaddata > db.json && python manage.py runserver"
#     volumes:
#       - .:/code
#     ports:
#       - "8000:8000"
#     depends_on:
#       - db
#     links:
#       - db
      
# version: "3.9"
# services:

#   web:
#     container_name: web
#     build:
#       context: .
#       dockerfile: Dockerfile

#     # command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#     env_file:
#       .env.dev

#     ports:
#       - 8000:8000
#     volumes:
#       - .:/main
#     expose:
#       - 8000
#     depends_on:
#       db:
#         condition: service_healthy
#     command: >
#       sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py loaddata > db.json && python manage.py runserver 0.0.0.0:8000"  
      
#   db:
#     container_name: db
#     build:
#       context: .
#       dockerfile: Dockerfile
#     restart: always
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: "123456"
#       POSTGRES_DB: fintehtest
#       # - "POSTGRES_HOST_AUTH_METHOD=trust"
#     env_file:
#       - .env.dev
#     ports:
#       - '5432'
#     volumes:
#       - ./db:/docker-entrypoint-initdb.d/
#       - database_volume:/var/lib/postgresql/data

#     healthcheck:
#       test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d fintehtest'"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

# volumes:
#   database_volume:

